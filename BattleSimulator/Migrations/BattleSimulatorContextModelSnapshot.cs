// <auto-generated />
using System;
using BattleSimulator.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BattleSimulator.Migrations
{
    [DbContext(typeof(BattleSimulatorContext))]
    partial class BattleSimulatorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BattleSimulator.Models.Army", b =>
                {
                    b.Property<int>("ArmyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BattleId")
                        .HasColumnType("int");

                    b.Property<double>("DamageDone")
                        .HasColumnType("float");

                    b.Property<double>("DamageTaken")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("NextAttackTime")
                        .HasColumnType("time");

                    b.Property<int>("Strategy")
                        .HasColumnType("int");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.Property<int>("UnitsAlive")
                        .HasColumnType("int");

                    b.Property<int>("UnitsLost")
                        .HasColumnType("int");

                    b.HasKey("ArmyId");

                    b.HasIndex("BattleId");

                    b.ToTable("Armies");
                });

            modelBuilder.Entity("BattleSimulator.Models.Attack", b =>
                {
                    b.Property<int>("AttackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttackChance")
                        .HasColumnType("int");

                    b.Property<double>("AttackDamage")
                        .HasColumnType("float");

                    b.Property<int>("AttackIndex")
                        .HasColumnType("int");

                    b.Property<int>("AttackRoll")
                        .HasColumnType("int");

                    b.Property<bool>("AttackSuccessful")
                        .HasColumnType("bit");

                    b.Property<int?>("AttackerId")
                        .HasColumnType("int");

                    b.Property<int>("BattleId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("BattleTime")
                        .HasColumnType("time");

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnitsAttacking")
                        .HasColumnType("int");

                    b.Property<int>("UnitsDestroyed")
                        .HasColumnType("int");

                    b.Property<int>("UnitsTargeted")
                        .HasColumnType("int");

                    b.HasKey("AttackId");

                    b.HasIndex("AttackerId");

                    b.HasIndex("BattleId");

                    b.HasIndex("TargetId");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("BattleSimulator.Models.Battle", b =>
                {
                    b.Property<int>("BattleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArmyCount")
                        .HasColumnType("int");

                    b.Property<int>("AttackCount")
                        .HasColumnType("int");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Reset")
                        .HasColumnType("bit");

                    b.Property<int>("Rolls")
                        .HasColumnType("int");

                    b.Property<string>("SimulationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Started")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<int?>("VictorId")
                        .HasColumnType("int");

                    b.HasKey("BattleId");

                    b.HasIndex("VictorId");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("BattleSimulator.Models.Settings", b =>
                {
                    b.Property<int>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BattleId")
                        .HasColumnType("int");

                    b.Property<double>("UnitAttackChance")
                        .HasColumnType("float");

                    b.Property<double>("UnitAttackDamage")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("UnitAttackTime")
                        .HasColumnType("time");

                    b.Property<double>("UnitHealth")
                        .HasColumnType("float");

                    b.HasKey("SettingsId");

                    b.HasIndex("BattleId")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("BattleSimulator.Models.Army", b =>
                {
                    b.HasOne("BattleSimulator.Models.Battle", "Battle")
                        .WithMany("Armies")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BattleSimulator.Models.Attack", b =>
                {
                    b.HasOne("BattleSimulator.Models.Army", "Attacker")
                        .WithMany()
                        .HasForeignKey("AttackerId");

                    b.HasOne("BattleSimulator.Models.Battle", "Battle")
                        .WithMany("Attacks")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BattleSimulator.Models.Army", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId");
                });

            modelBuilder.Entity("BattleSimulator.Models.Battle", b =>
                {
                    b.HasOne("BattleSimulator.Models.Army", "Victor")
                        .WithMany()
                        .HasForeignKey("VictorId");
                });

            modelBuilder.Entity("BattleSimulator.Models.Settings", b =>
                {
                    b.HasOne("BattleSimulator.Models.Battle", "Battle")
                        .WithOne("Settings")
                        .HasForeignKey("BattleSimulator.Models.Settings", "BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
